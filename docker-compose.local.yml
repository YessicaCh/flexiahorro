

services:
  cache:
    image: redis:6.2-alpine
    restart: always
    container_name: $SITE-$ENV-cache
    networks:
      - django-network
    environment:
      ENV: $ENV
      CACHE_HOST: cache
      CACHE_PORT: $CACHE_PORT
    ports:
      - "$CACHE_PORT:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass redis
    volumes:
      - ./data/redis-$ENV:/data

  web:
    build:
      dockerfile: Dockerfile
      context: ./src
    container_name: $SITE-$ENV-web
    networks:
      - django-network
    restart: always
    ports:
      - "$WEB_PORT:8000"
    env_file:
      - .env 
    environment:
      - ENV=$ENV
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_HOST=$POSTGRES_HOST
      - CACHE_HOST=$CACHE_HOST
      - CACHE_PORT=$CACHE_PORT
      - CACHE_PASSWORD=$CACHE_PASSWORD
      - SECRET_KEY=$SECRET_KEY
      - DEBUG=$DEBUG
      - AWS_EC2_METADATA_DISABLED=false  # ðŸ”¹ Agregando esta lÃ­nea
    volumes:
      - ./src/:/app
    depends_on:
      - db
      - cache

  db:
    image: postgres:13
    container_name: $SITE-$ENV-db
    networks:
      - django-network
    restart: always
    environment:
      ENV: $ENV
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - ./data/postgresql-$ENV:/var/lib/postgresql/data
    ports:
      - "$DB_PORT:5432"

  process_tasks:
    build:
      dockerfile: Dockerfile
      context: ./src
    container_name: $SITE-$ENV-process-tasks
    command: python manage.py process_tasks --sleep 15
    networks:
      - django-network
    restart: always
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_HOST: $POSTGRES_HOST
      TZ: UTC
    volumes:
      - ./src/:/app
    depends_on:
      - db

  # dozzle:
  #   image: amir20/dozzle:latest
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - 8080:8080
      
networks:
  django-network:
    driver: bridge
